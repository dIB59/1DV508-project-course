/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;

import org.example.database.TestDatabase;
import org.example.features.ingredients.IngredientMapper;
import org.example.features.ingredients.IngredientsRepository;
import org.example.features.product.Product;
import org.example.features.product.ProductMapper;
import org.example.features.product.ProductRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class AppTest {

  private final TestDatabase database = TestDatabase.getInstance();

  @AfterEach
  void tearDown() {
    database.resetDatabase();
  }

  @BeforeEach
  void setUp() {
    database.resetDatabase();
  }

  @Test
  void productRepoTest() throws Exception {
    Connection connection = database.getConnection();
    ProductRepository productRepository = new ProductRepository(connection,
        new ProductMapper(new IngredientsRepository(connection, new IngredientMapper())));
    // Product(String name, String description, double price, String imageUrl,
    // String specialLabel, boolean isASide)
    productRepository.save(new Product("Test Product", "Test Description", 10.0, "image.jpeg", "Test label", false));

    assertEquals(
        1,
        productRepository.findAll().stream()
            .filter(product -> product.getName().equals("Test Product"))
            .count());
  }

  @Test
  void productTagsTest() throws Exception {
    Connection connection = database.getConnection();
    ProductRepository productRepository = new ProductRepository(connection,
        new ProductMapper(new IngredientsRepository(connection, new IngredientMapper())));

    var product = productRepository
        .save(new Product("Test Product", "Test Description", 10.0, "image.jpeg", "Test label", false));

    var previousTags = product.getTags();

    productRepository.createTag("Tag4");
    productRepository.createTag("Tag5");

    var tags = productRepository.findAllTags();

    Product updatedProduct = new Product(
        product.getName(), product.getDescription(), product.getPrice(), product.getImageUrl(),
        product.getSpecialLabel(), product.getisASide(), tags);

    assertEquals(2, updatedProduct.getTags().size());
  }
}
